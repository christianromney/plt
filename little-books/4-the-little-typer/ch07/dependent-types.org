#+TITLE: Dependent Types
#+OPTIONS: toc:nil num:nil author:nil timestamp:nil
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+EXPORT_FILE_NAME: index.html
* Definition
A dependent type is *a type that is defined by something that is not a type*.

* Induction on Natural Numbers
 - Induction involves a proof of N=0, then of N+1
 - In Pie, induction on Nat uses the form =ind-Nat=
 - =ind-Nat= can do everything =rec-Nat= can do, plus work with dependent types
 - =ind-Nat= takes an extra argument between the target and the base called the motive
 - The motive is a function that returns the type of the expression at every step
   - this includes the base step
   - this means the motive determines the type of the =ind-Nat= expression as a whole

#+begin_example

(ind-Nat target
  motive
  base
  step)

#+end_example

We said above that =ind-Nat= behaves like =rec-Nat= except that we can use it
with dependent types. This means that base and step return different dependent
types. The arguments to =ind-Nat= are:

- =target= : the initial =Nat=
- =motive= : a function that is applied to the target at each step to
  determine the type returned by that step, or the base when the
  target is =zero=
- =base= : the value to return when the =target= is =zero=
- =step= : a function that accepts the value under the =add1= and the
  recursive result of the computation at that step. The value of the
  final (top-most) =step= is the value of the =ind-Nat= expression.

The workings of =ind-Nat= are best illustrated by example.

* Exercises

Suppose want to define a function that returns a specific number of =’peas=. We
could define the function to return a =(List Atom)= like this:

#+begin_src racket :tangle list-of-peas.rkt :lang pie

  #lang pie

  (claim step-list-of-peas
    (-> Nat (List Atom)
        (List Atom)))

  (define step-list-of-peas
    (lambda (k-1 answer-k-1)
      (:: 'pea answer-k-1)))

  (claim list-of-peas
    (-> Nat (List Atom)))

  (define list-of-peas
    (lambda (k)
      (rec-Nat k
        (the (List Atom) nil)
        step-list-of-peas)))

  (check-same (List Atom)
    (:: 'pea nil)
    (list-of-peas 1))

  (check-same (List Atom)
    (the (List Atom) nil)
    (list-of-peas 0))

#+end_src

Using a list works in this case, but is unsatisfying because the type doesn’t
describe /how many/ peas are returned. What if we modify the code to use a
Vector instead?

#+begin_src racket :tangle failed-attempt.rkt :lang pie

#lang pie

(claim vec-of-peas
  (Π ((k Nat))
     (Vec Atom k)))

(define vec-of-peas
  (λ (k)
    (rec-Nat k
      (the (Vec Atom zero) vecnil)
      (λ (k-1 ans-k-1)
        (the (Vec Atom (add1 k-1))
             (vec:: 'pea ans-k-1))))))

#+end_src

This definition /seems/ like it should work, but results in an error because
=rec-Nat= isn’t able to work with dependent types. Now we’ll see how =ind-Nat=
allows us to specify the different specific types returned by the base and each
step.

The first objective is to define the motive. Here’s how we can reason about the
claim and definition of the motive, which we’ll call =motive-peas=. The motive
is a function that will be applied to the target and return the *type* of the
=ind-Nat= expression. The overall =peas= function is intended to return a
=Vector= of Atoms, and the Vector type describes the exact length of the Vector.
So we can reason that the motive will require a specific =Nat= describing the
length of the Vector and will return a /type/ that is a Vector of that length.
In order to incorporate the specific =Nat=, we’ll introduce a binding for it in
the claim with a =\Pi= expression.

#+begin_src racket :tangle peas.rkt :lang pie

  #lang pie

  (claim motive-peas
    (Π ((l Nat))
       U))

  (define motive-peas
    (λ (l)
      (Vec Atom l)))

#+end_src

Notice that the motive returns the type =(Vec Atom zero)= if we call =(peas 0)=.
Since the only =(Vec Atom zero)= is =vecnil=, we already know that will be the
=base= in the =ind-Nat= expression as well as the overall return value for
=(peas 0)=. At this point, we know the =target=, =motive=, and =base= of the
=ind-Nat= expression, leaving only the =step= to figure out.

The step function for =ind-Nat= behaves just as the step function for =rec-Nat=
which means that it will receive two arguments when the target is =(the Nat
(add1 k))=. The first argument will be =(the Nat k)= (eliminating an =add1=),
and the second argument will be the recursive result of the step function for
=(the Nat k)=.

We can discover the correct implementation of =step-peas= by reasoning about a
simple case. Let’s assume we’re computing the value of =(peas two)= which is
=(peas (add1 (add1 zero)))=. This means the =target= of the =ind-Nat= expression
is =two=. We know that the step function will be given two arguments =(add1
zero)= and =(vec:: ’pea vecnil)=. The implementation of the step function must
clearly use the =vec::= constructor to tack another =’pea= onto the recursive
result.

The claim is the tricky part. We know that we will need the value of the
=Nat= to be used in the type definition, so we will need a =\Pi= expression. Since
step is a function, we know the claim returns a function type. But how do we
specify the type of the arguments and return value? It turns out we’ve already
done that work. Both the second argument and the return value are the result of
the step function. The point of introducing the =motive= was to calculate the
result of the step function, so we /invoke/ the motive in the claim to find the
right type!

#+begin_src racket :tangle peas.rkt :lang pie

  (claim step-peas
    (Π ((l-1 Nat))
       (-> (motive-peas l-1)
           (motive-peas (add1 l-1)))))

  (define step-peas
    (λ (l-1)
      (λ (answer-l-1)
        (vec:: 'pea answer-l-1))))

#+end_src

With all of the parts of the =ind-Nat= expression defined, it’s trivial to
stitch them together and check our work.

#+begin_src racket :tangle peas.rkt :lang pie

  (claim peas
    (Π ((l Nat))
       (Vec Atom l)))

  (define peas
    (λ (l)
      (ind-Nat l
        motive-peas
        vecnil
        step-peas)))

  (check-same
   (Vec Atom 5)
   (the (Vec Atom 5)
        (vec:: 'pea
               (vec:: 'pea
                      (vec:: 'pea
                             (vec:: 'pea
                                    (vec:: 'pea vecnil))))))
   (peas 5))
#+end_src

Now we can move on to something slightly more complex. In this section, we will
implement the =last= function, which returns the last element of a vector of any
type.

#+begin_src racket :tangle last.rkt :lang pie
  (claim motive-last
    (-> U Nat
        U))

  (define motive-last
    (λ (E k)
      (-> (Vec E (add1 k))
          E)))

  (claim base-last
    (Π ((E U))
       (-> (Vec E (add1 zero))
           E)))

  (define base-last
    (λ (E)
      (λ (es)
        (head es))))

  (claim step-last
    (Π ((E U)
        (k Nat))
       (-> (-> (Vec E (add1 k)) E)
           (-> (Vec E (add1 (add1 k)))
               E))))

  (define step-last
    (λ (E)
      (λ (n-1 last-of-n-1)
        (λ (es)
          (last-of-n-1 (tail es))))))

  (claim last
    (Π ((E U)
        (k Nat))
       (-> (Vec E (add1 k))
           E)))

  (define last
    (λ (E k)
      (λ (es)
        ((ind-Nat k
           (motive-last E)
           (base-last E)
           (step-last E)) es))))

  (check-same
   Atom
   'Done
   (last Atom 0 (vec:: 'Done vecnil)))

  (check-same
   Atom
   'Coming
   (last Atom 2 (vec:: 'Winter (vec:: 'Is (vec:: 'Coming  vecnil)))))
#+end_src

For the final exercise, we will implement =drop-last= which returns all but the
last element of a vector of any type. As before, we begin by defining the
motive which is a function applied to the target =Nat= which returns the /type/
of the =base=, the =step= and the =ind-Nat= expression as a whole. Since we want
=drop-last= to work with vectors of any type, we need a type parameter. Since we
want to make a dependent type on the length of the =Vector=, we also need a
=Nat= parameter. Lastly, the motive returns a type /by definition/. We can now
write the claim for =motive-drop-last=.

#+begin_src racket :tangle drop-last.rkt :lang pie
  #lang pie

  (claim motive-drop-last
    (-> U Nat
        U))

#+end_src

For the implementation of =motive-drop-last=, we know we are writing a function
and that we must accept the type and length for the vector’s type definition,
and we must return a /type/ describing a function that accepts a vector and
returns a smaller vector.

#+begin_src racket :tangle drop-last.rkt :lang pie

  (define motive-drop-last
    (λ (E k)
      (-> (Vec E (add1 k))
          (Vec E k))))

#+end_src

With this type to guide us, we can synthesize the claim and the implementation
of =base-drop-last=. Let’s start with the =claim=. Part of the entire point of
the =motive= is to return the type of the =base=. Therefore, we need only look
at the implementation of =motive=drop-last= to figure out what parameters we
need to pass it from within the claim of the base. We need the type, which the
base will also accept. We also need a specific Nat, which for the base case of
induction on natural numbers we know to be zero:

#+begin_src racket :tangle drop-last.rkt :lang pie

  (claim base-drop-last
    (Π ((E U))
       (motive-drop-last E zero)))

#+end_src

This brings us to the implementation of the base. Plugging in =E= and =zero= for
the arguments to the motive gives us the specific type of the base. The base
must therefore return a function that takes a =(Vec E (add1 zero))= and returns
a =(Vec E zero)=, of which there is only one instance: =vecnil=. The
implementation can only be the following:

#+begin_src racket :tangle drop-last.rkt :lang pie

  (define base-drop-last
    (λ (E) ;; for the Π expression type parameter
      (λ (es) ;; a function accepting a vector of one
        vecnil))) ;; returning a vector of zero

#+end_src

Next up, we have the =step= function. We know that the step function for
=ind-Nat= when the target is a =k= will will accept two arguments. The first is
=k-1= (a =Nat= with the top =add1= eliminated), and the recursive result. The
recursive result is described by the motive. Finally, while the step function
accepts the result for =k-1=, /it/ is supposed to return the result for =k=.
This type is also described by the motive. We now have enough information to
write the =claim= for =step-drop-last=.

#+begin_src racket :tangle drop-last.rkt :lang pie

  (claim step-drop-last
    (Π ((E U)
        (k Nat))
       (-> (motive-drop-last E k)
           (motive-drop-last E (add1 k)))))

#+end_src

The implementation is easier to piece together if we think of the final
(outermost) step of this computation. Since we’re dropping the last item of the
vector only, we know we need to preserve the head of the vector and cons
(=vec::=) it onto the recursive result. But the recursive result is a function
that takes vector, so the only thing that makes sense is to apply the result
function to the =tail= of the vector that is passed to the lambda returned by
the step.

#+begin_src racket :tangle drop-last.rkt :lang pie

  (define step-drop-last
    (λ (E)
      (λ (k-1 result-k-1)
        (λ (es)
          (vec:: (head es)
                 (result-k-1
                  (tail es)))))))

#+end_src

Finally, we come to =drop-last= which accepts the type and =Nat= that describe
the vector. We can leverage the motive implementation here as well.

#+begin_src racket :tangle drop-last.rkt :lang pie

  (claim drop-last
    (Π ((E U)
        (k Nat))
       (motive-drop-last E k)))

#+end_src

The implementation can simply use =ind-Nat= to stitch together all of the pieces
we’ve previously defined.

#+begin_src racket :tangle drop-last.rkt :lang pie

  (define drop-last
    (λ (E k)
      (ind-Nat k
        (motive-drop-last E)
        (base-drop-last E)
        (step-drop-last E))))

#+end_src

All that remains is to check our implementation:

#+begin_src racket :tangle drop-last.rkt :lang pie

  (check-same
   (Vec Atom 2)
   (vec:: 'a (vec:: 'b vecnil))
   (drop-last Atom 2 (vec:: 'a (vec:: 'b (vec:: 'c vecnil)))))

#+end_src
