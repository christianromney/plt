#lang pie

;; length of List(E)
(claim length-step
  (Π ((E U))
     (-> E (List E) Nat Nat)))

(define length-step
  (λ (E)
    (lambda (e es len-es)
      (add1 len-es))))

(claim length
  (Π ((E U))
     (-> (List E) Nat)))

(define length
  (λ (E)
    (λ (l)
      (rec-List l
        zero
        (length-step E)))))

(length Atom nil) ;; => (the Nat 0)
(length Atom (:: 'foo (:: 'bar (:: 'baz nil)))) ;; => (the Nat 3)
(length Nat (:: 0 (:: 1 (:: 1 (:: 2 (:: 3 (:: 5 nil))))))) ;; => (the Nat 6)

(claim +
  (-> Nat Nat Nat))

(define +
  (λ (x y)
    (rec-Nat x
      y
      (λ (x-1 sum)
        (add1 sum)))))

(claim sum
  (-> (List Nat) Nat))

(define sum
  (λ (n)
    (rec-List n
      0
      (λ (h t sum-tail)
        (+ h sum-tail)))))

(sum (:: 1 (:: 5 (:: 6 nil)))) ;; => (the Nat 12)

(claim append-step
  (Π ((E U))
     (-> E (List E) (List E) (List E))))

(define append-step
  (λ (E)
    (λ (e es appended-es)
      (:: e appended-es))))

(claim append
  (Π ((E U))
     (-> (List E) (List E) (List E))))

(define append
  (λ (E)
    (λ (l m)
      (rec-List l
        m
        (append-step E)))))

(append Nat
        (:: 0 (:: 1 nil))
        (:: 2 (:: 3 nil))) ;; => (the (List Nat) (:: 0 (:: 1 (:: 2 (:: 3 nil)))))

(append Atom
        (:: 'foo (:: 'bar nil))
        (:: 'baz (:: 'quux nil))) ;; => (the (List Atom) (:: 'foo (:: 'bar (:: 'baz (:: 'quux nil)))))

;; (snoc Atom (:: 'potato (:: 'butter nil)) 'rye-bread)
;; => (:: 'potato (:: 'butter (:: 'rye-bread nil)))

(claim step-snoc
  (Π ((E U))
     (-> E (List E) (List E) (List E))))

(define step-snoc
  (λ (E)
    (λ (e es so-far)
      (:: e so-far))))

(claim snoc
  (Π ((E U))
     (-> (List E) E (List E))))

(define snoc
  (λ (E)
    (λ (es e)
      (rec-List es
        (:: e nil)
        (step-snoc E)))))

(snoc Atom (:: 'potato (:: 'butter nil)) 'rye-bread)
;; =>
;; (the (List Atom)
;;   (:: 'potato
;;     (:: 'butter
;;       (:: 'rye-bread nil))))
